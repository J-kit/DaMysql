using MySql.Data.MySqlClient;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using static DaMysql.Mysql.MySqlFunctionHelper;

namespace DaMysql.Mysql
{
    internal class MysqlProvider
    {
        private MySqlConnection dbcon = null;
        public bool StrictMode { get { return _strictMode; } set { _strictMode = value; } }
        private bool _strictMode;

        public MysqlProvider(MysqlConnectionData ConnectionData)
        {
            _strictMode = ConnectionData.StrictMode;
            dbcon = new MySqlConnection(ConnectionData.ToString());
            dbcon.Open();
        }

        ~MysqlProvider()
        {
            dbcon.Close();
            dbcon = null;
        }

        public List<T> DoSelect<T>(string table, T toGenObj) where T : new()
            => ExecQuery<T>(selectStatementGenerator(table, toGenObj));

        /// <summary>
        /// Returns a list of values from a Table by toGenObj where properties are not null
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="table"></param>
        /// <param name="toGenObj"></param>
        /// <returns></returns>
        public List<T> ExecQuery<T>(string table, object toGenObj) where T : new()
           => ExecQuery<T>(selectStatementGenerator(table, toGenObj));

        /// <summary>
        /// Executes a select statement which was generated by the selectStatementGenerator
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="ssc"></param>
        /// <returns></returns>
        public List<T> ExecQuery<T>(SelectStatementContainer ssc) where T : new()
            => ExecQuery<T>(ssc.Statement, ssc.escapedStrings);

        /// <summary>
        /// Synonym for ExecQuery<runQueryAsVoid>
        /// </summary>
        /// <param name="query"></param>
        /// <param name="escapedStrings"></param>
        public void ExecQuery(string query, mysqlParamContainer[] escapedStrings = null)
            => ExecQuery<runQueryAsVoid>(query, escapedStrings);

        /// <summary>
        /// Executes query and parses it to a List of Type/Object
        /// !!WARNING!! Is Explicit
        /// ExecQuery<List<mysqlField>> is not Explicit, but unparsed
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="query"></param>
        /// <param name="escapedStrings"></param>
        /// <returns></returns>
        public List<T> ExecQuery<T>(string query, mysqlParamContainer[] escapedStrings = null) where T : new()
        {
            List<T> retquery = null;
            if (typeof(T) != typeof(runQueryAsVoid)) //Just execute, don't do anything with result
                retquery = new List<T>();

            if (typeof(T) == typeof(List<mysqlField>))
                return (execQueryToList(query, escapedStrings)) as List<T>;

            using (MySqlCommand exec_cmd = dbcon.CreateCommand())
            {
                exec_cmd.CommandText = query;
                if (escapedStrings != null)
                {
                    foreach (var escapeString in escapedStrings)
                        exec_cmd.Parameters.AddWithValue(escapeString.Name, escapeString.Value);
                    exec_cmd.Prepare();
                }

                using (MySqlDataReader msgquery_reader = exec_cmd.ExecuteReader())
                {
                    if (retquery == null)
                    {
                        //If just insertion-return null.
                        msgquery_reader.Close();
                        return null;
                    }
                    //Getting First result (outside of while because of exeption handling)
                    msgquery_reader.Read();

                    ////Do strict exception handling if row doesn't exist
                    if (_strictMode)
                    {
                        var fieldNames = Enumerable.Range(0, msgquery_reader.FieldCount).Select(i => msgquery_reader.GetName(i)).ToArray();
                        var tObj = new T();
                        var tObjProb = tObj.GetType().GetProperties();

                        foreach (var tObjProbItem in tObjProb)
                            if (!fieldNames.Contains(tObjProbItem.Name))
                                throw new MySqlTypeError("The given type doesn't match one of the resulting fields!", MySqlFunctionHelper.generateTypeCorrection(query, msgquery_reader));
                    }
                    ////end strict exception handling

                    Dictionary<string, object> obj;

                    do
                    {
                        obj = Enumerable.Range(0, msgquery_reader.FieldCount).ToDictionary(
                                                             i => msgquery_reader.GetName(i),
                                                             i => msgquery_reader.GetValue(i));

                        var thObj = new T();
                        var thObjProb = thObj.GetType().GetProperties();

                        foreach (var item in thObjProb)
                        {
                            object myObj;// = msgquery_reader[item.Name];
                            if (obj.TryGetValue(item.Name, out myObj)) //Result contains a column with the name of a property of the given object
                                item.SetValue(thObj, myObj);
                            else
                                item.SetValue(thObj, null);
                        }
                        retquery.Add(thObj);
                    } while (msgquery_reader.Read());
                }
            }
            return retquery;
        }

        /// <summary>
        /// Not explicit, but unparsed -> call ExecQuery<List<mysqlField>>
        /// </summary>
        /// <param name="query"></param>
        /// <param name="escapedStrings"></param>
        /// <returns></returns>
        private List<List<mysqlField>> execQueryToList(string query, mysqlParamContainer[] escapedStrings = null)
        {
            var retquery = new List<List<mysqlField>>();
            var ret = new List<Dictionary<string, object>>();
            using (MySqlCommand exec_cmd = dbcon.CreateCommand())
            {
                exec_cmd.CommandText = query;
                if (escapedStrings != null)
                {
                    foreach (var escapeString in escapedStrings)
                        exec_cmd.Parameters.AddWithValue(escapeString.Name, escapeString.Value);
                    exec_cmd.Prepare();
                }

                using (MySqlDataReader msgquery_reader = exec_cmd.ExecuteReader())
                {
                    foreach (System.Data.Common.DbDataRecord item in msgquery_reader)
                    {
                        Dictionary<string, object> retVar = new Dictionary<string, object>();
                        for (int i = 0; i < item.FieldCount; i++)
                        {
                            retVar[item.GetName(i)] = item[i];
                        }
                        ret.Add(retVar);
                    }

                    //+		item	{System.Data.Common.DataRecordInternal}	object {System.Data.Common.DataRecordInternal}

                    //while (msgquery_reader.Read())
                    //{
                    //    retquery.Add(new List<mysqlField>());
                    //    for (int i = 0; i < msgquery_reader.FieldCount; i++)
                    //    {
                    //        retquery[retquery.Count - 1].Add(new mysqlField()
                    //        {
                    //            Name = msgquery_reader.GetName(i),
                    //            Value = msgquery_reader[i].ToString()
                    //        });
                    //        Debugger.Break();
                    //    }
                    //}
                }
            }
            return retquery;
        }

        public string QueryGenerator()
        {
            return "SELECT * FROM `ytDownloadQueue`";
        }
    }
}