using MySql.Data.MySqlClient;
using System.Collections.Generic;
using System.Data.Common;
using System.Diagnostics;
using System.Linq;
using static DaMysql.Mysql.MySqlFunctionHelper;

namespace DaMysql.Mysql
{
    internal class MysqlProvider
    {
        private MySqlConnection _dbcon = null;
        public bool StrictMode { get; set; }

        public MysqlProvider(MysqlConnectionData connectionData)
        {
            StrictMode = connectionData.StrictMode;
            _dbcon = new MySqlConnection(connectionData.ToString());
            _dbcon.Open();
        }

        ~MysqlProvider()
        {
            _dbcon.Close();
            _dbcon = null;
        }

        public List<T> DoSelect<T>(string table, T toGenObj) where T : new()
            => ExecQuery<T>(selectStatementGenerator(table, toGenObj));

        /// <summary>
        /// Returns a list of values from a Table by toGenObj where properties are not null
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="table"></param>
        /// <param name="toGenObj"></param>
        /// <returns></returns>
        public List<T> ExecQuery<T>(string table, object toGenObj) where T : new()
           => ExecQuery<T>(selectStatementGenerator(table, toGenObj));

        /// <summary>
        /// Executes a select statement which was generated by the selectStatementGenerator
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="ssc"></param>
        /// <returns></returns>
        public List<T> ExecQuery<T>(SelectStatementContainer ssc) where T : new()
            => ExecQuery<T>(ssc.Statement, ssc.escapedStrings);

        /// <summary>
        /// Synonym for ExecQuery<runQueryAsVoid>
        /// </summary>
        /// <param name="query"></param>
        /// <param name="escapedStrings"></param>
        public void ExecQuery(string query, mysqlParamContainer[] escapedStrings = null)
            => ExecQuery<runQueryAsVoid>(query, escapedStrings);

        /// <summary>
        /// Executes query and parses it to a List of Type/Object
        /// !!WARNING!! Is Explicit
        /// ExecQuery<List<mysqlField>> is not Explicit, but unparsed
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="query"></param>
        /// <param name="escapedStrings"></param>
        /// <returns></returns>
        public List<T> ExecQuery<T>(string query, mysqlParamContainer[] escapedStrings = null) where T : new()
        {
            List<T> retquery = null;
            if (typeof(T) != typeof(runQueryAsVoid)) //Just execute, don't do anything with result
            {
                retquery = new List<T>();
            }

            if (typeof(T) == typeof(Dictionary<string, object>))
            {
                return (ExecQueryToList(query, escapedStrings)) as List<T>;
            }

            var thObjProb = typeof(T).GetProperties();

            using (var execCmd = _dbcon.CreateCommand())
            {
                execCmd.CommandText = query;
                if (escapedStrings != null)
                {
                    foreach (var escapeString in escapedStrings)
                    {
                        execCmd.Parameters.AddWithValue(escapeString.Name, escapeString.Value);
                    }
                    execCmd.Prepare();
                }

                using (var msgqueryReader = execCmd.ExecuteReader())
                {
                    if (retquery == null)
                    {
                        //If just insertion-return null.
                        msgqueryReader.Close();
                        return null;
                    }
                    //Getting First result (outside of while because of exeption handling)
                    msgqueryReader.Read();

                    ////Do strict exception handling if row doesn't exist
                    if (StrictMode)
                    {
                        var fieldNames = Enumerable.Range(0, msgqueryReader.FieldCount).Select(i => msgqueryReader.GetName(i)).ToArray();

                        if (thObjProb.Any(tObjProbItem => !fieldNames.Contains(tObjProbItem.Name)))
                        {
                            throw new MySqlTypeError("The given type doesn't match one of the resulting fields!", MySqlFunctionHelper.generateTypeCorrection(query, msgqueryReader));
                        }
                    }
                    ////end strict exception handling

                    do
                    {
                        var obj = Enumerable.Range(0, msgqueryReader.FieldCount).ToDictionary(
                            i => msgqueryReader.GetName(i),
                            i => msgqueryReader.GetValue(i));

                        var thObj = new T();

                        foreach (var item in thObjProb)
                        {
                            item.SetValue(thObj, obj.TryGetValue(item.Name, out object myObj) ? myObj : null);
                        }
                        retquery.Add(thObj);
                    } while (msgqueryReader.Read());
                }
            }
            return retquery;
        }

        /// <summary>
        /// Not explicit, but unparsed -> call ExecQuery<List<mysqlField>>
        /// </summary>
        /// <param name="query"></param>
        /// <param name="escapedStrings"></param>
        /// <returns></returns>
        private IEnumerable<Dictionary<string, object>> ExecQueryToList(string query, mysqlParamContainer[] escapedStrings = null)
        {
            var retquery = new List<List<mysqlField>>();
            var ret = new List<Dictionary<string, object>>();
            using (var execCmd = _dbcon.CreateCommand())
            {
                execCmd.CommandText = query;
                if (escapedStrings != null)
                {
                    foreach (var escapeString in escapedStrings)
                    {
                        execCmd.Parameters.AddWithValue(escapeString.Name, escapeString.Value);
                    }

                    execCmd.Prepare();
                }

                using (var msgqueryReader = execCmd.ExecuteReader())
                {
                    if (msgqueryReader == null)
                    {
                        return null;
                    }

                    return (msgqueryReader.Cast<DbDataRecord>()
                        .Select(item => Enumerable.Range(0, msgqueryReader.FieldCount)
                            .ToDictionary(i => msgqueryReader.GetName(i), i => msgqueryReader.GetValue(i))));

                    //    ret.AddRange(from DbDataRecord item in msgquery_reader select Enumerable.Range(0, msgquery_reader.FieldCount).ToDictionary(i => msgquery_reader.GetName(i), i => msgquery_reader.GetValue(i)));
                }
            }
        }

        public string QueryGenerator()
        {
            return "SELECT * FROM `ytDownloadQueue`";
        }
    }
}